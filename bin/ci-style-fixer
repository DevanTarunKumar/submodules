#!/usr/bin/env bash

set -euo pipefail

#######################################
# Resolves a relative path from a symlink to a fully qualified path
#
# Arguments:
#   1 the symlink to resolve (NOT the source, but the link)
#   2 the relative path from the link source to resolve
#######################################
get_symlink_relative_path () {
  local symlink="$1"
  local relativePath="$2"

  local symlinkPath
  local symlinkDir
  local sourceDir
  local resolvedPath

  # Find the source of the symlink
  symlinkPath=$(readlink "$symlink")

  # Get the symlink's directory
  symlinkDir="$(cd "$(dirname "$symlink")" && pwd)"

  # Change to the symlink's directory, then from there follow the symlink and get the source's directory
  sourceDir="$(cd "$symlinkDir" && cd "$(dirname "$symlinkPath")" && pwd)"

  # Resolve the relative path from the source's directory
  resolvedPath="$(cd "$sourceDir/$relativePath" && pwd)"

  echo "$resolvedPath"
}

# The submodules dir is the parent of this script's dir, but since this script will be called via a symlink,
# we can't get the parent of $0 directly. So instead, we get the parent of the symlink source (this script).
submodules=$(get_symlink_relative_path "$0" '..')

# Include lib functions
. "$submodules"/lib/git.sh
. "$submodules"/lib/github.sh

#######################################
# Fix and stage files
#
# Arguments:
#   1 the files to fix / stage
#######################################
fix_and_stage_styles () {
    local files="$1"

    "$submodules"/bin/style-fixer "$files"
    echo "$files" | xargs git add
}

#######################################
# Commits & pushes staged changes and exits with a non-zero exit code.
#
# Arguments:
#   1 the type of changes that are being applied
#######################################
apply_changes_and_exit () {
    local type="$1"

    echo "Found $type changes. Pushing back to branch..."
    git commit -m "Apply $type changes"
    git push
    exit 1
}

#######################################
# Filter fixable files
#######################################
get_fixable_files () {
    files="$(git diff --diff-filter=CMTRA --name-only origin/master...HEAD)"
    fixable_files=""
    for file in $files
    do
      if echo "$file" | grep 'css\|scss\|html\|js\|ts\|php\|java\|feature\|twig'; then
        fixable_files="$fixable_files $file"
      fi
    done
    echo "$fixable_files"
}

git.branch.exit-if-master "Skipping style fixer"

fixable_files=$(get_fixable_files)

if [[ -n "$fixable_files" ]];then
    fix_and_stage_styles "$fixable_files"
fi

git.index.exit_if_empty "No style changes found. Moving on..."

api_response=$(github.pull.get)
git_url=$(github.pull.url.get "$api_response")
git_ref=$(github.pull.ref.get "$api_response")

git.branch.checkout-and-track "$git_url" "$git_ref"

apply_changes_and_exit style
